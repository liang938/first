C251 COMPILER V5.60.0,  vl53l0x_api_calibration                                            13/04/24  20:07:04  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE vl53l0x_api_calibration
OBJECT MODULE PLACED IN .\Out_File\vl53l0x_api_calibration.obj
COMPILER INVOKED BY: D:\keil5\keil5_MDK\keil5_MDK_32\C251\BIN\C251.EXE ..\VL53L0X\core\src\vl53l0x_api_calibration.c XSM
                    -ALL INTR2 WARNINGLEVEL(3) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\see
                    -kfree_peripheral;..\CODE;..\USER\inc;..\USER\src) DEBUG PRINT(.\Out_File\vl53l0x_api_calibration.lst) OBJECT(.\Out_File\
                    -vl53l0x_api_calibration.obj) 

stmt  level    source

    1          /*******************************************************************************
    2           Copyright © 2016, STMicroelectronics International N.V.
    3           All rights reserved.
    4          
    5           Redistribution and use in source and binary forms, with or without
    6           modification, are permitted provided that the following conditions are met:
    7           * Redistributions of source code must retain the above copyright
    8           notice, this list of conditions and the following disclaimer.
    9           * Redistributions in binary form must reproduce the above copyright
   10           notice, this list of conditions and the following disclaimer in the
   11           documentation and/or other materials provided with the distribution.
   12           * Neither the name of STMicroelectronics nor the
   13           names of its contributors may be used to endorse or promote products
   14           derived from this software without specific prior written permission.
   15          
   16           THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
   17           ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   18           WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND
   19           NON-INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS ARE DISCLAIMED.
   20           IN NO EVENT SHALL STMICROELECTRONICS INTERNATIONAL N.V. BE LIABLE FOR ANY
   21           DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
   22           (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
   23           LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
   24           ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
   25           (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   26           SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   27           ******************************************************************************/
   28          
   29          #include "vl53l0x_api.h"
*** ERROR C318 IN LINE 29 OF ..\VL53L0X\core\src\vl53l0x_api_calibration.c: can't open file 'vl53l0x_api.h'
   30          #include "vl53l0x_api_core.h"
*** ERROR C318 IN LINE 30 OF ..\VL53L0X\core\src\vl53l0x_api_calibration.c: can't open file 'vl53l0x_api_core.h'
   31          #include "vl53l0x_api_calibration.h"
*** ERROR C318 IN LINE 31 OF ..\VL53L0X\core\src\vl53l0x_api_calibration.c: can't open file 'vl53l0x_api_calibration.h'
   32          
   33          #ifndef __KERNEL__
   34          #include <stdlib.h>
   35          #endif
   36          
   37          #define LOG_FUNCTION_START(fmt, ...) \
   38                  _LOG_FUNCTION_START(TRACE_MODULE_API, fmt, ##__VA_ARGS__)
   39          #define LOG_FUNCTION_END(status, ...) \
   40                  _LOG_FUNCTION_END(TRACE_MODULE_API, status, ##__VA_ARGS__)
   41          #define LOG_FUNCTION_END_FMT(status, fmt, ...) \
   42                  _LOG_FUNCTION_END_FMT(TRACE_MODULE_API, status, fmt, ##__VA_ARGS__)
   43          
   44          #define REF_ARRAY_SPAD_0  0
   45          #define REF_ARRAY_SPAD_5  5
   46          #define REF_ARRAY_SPAD_10 10
   47          
   48          uint32_t refArrayQuadrants[4] = {REF_ARRAY_SPAD_10, REF_ARRAY_SPAD_5,
*** ERROR C142 IN LINE 48 OF ..\VL53L0X\core\src\vl53l0x_api_calibration.c: illegal initialization
   49                          REF_ARRAY_SPAD_0, REF_ARRAY_SPAD_5 };
   50          
   51          VL53L0X_Error VL53L0X_perform_xtalk_calibration(VL53L0X_DEV Dev,
*** WARNING C34 IN LINE 51 OF ..\VL53L0X\core\src\vl53l0x_api_calibration.c: 'VL53L0X_Error': missing declaration specif
C251 COMPILER V5.60.0,  vl53l0x_api_calibration                                            13/04/24  20:07:04  PAGE 2   

             -iers
*** ERROR C42 IN LINE 51 OF ..\VL53L0X\core\src\vl53l0x_api_calibration.c: 'VL53L0X_Error': not in formal parameter list
*** ERROR C25 IN LINE 51 OF ..\VL53L0X\core\src\vl53l0x_api_calibration.c: syntax error near 'VL53L0X_perform_xtalk_cali
             -bration'
*** ERROR C25 IN LINE 51 OF ..\VL53L0X\core\src\vl53l0x_api_calibration.c: syntax error near 'Dev'
   52                                  FixPoint1616_t XTalkCalDistance,
   53                                  FixPoint1616_t *pXTalkCompensationRateMegaCps)
   54          {
*** ERROR C42 IN LINE 54 OF ..\VL53L0X\core\src\vl53l0x_api_calibration.c: 'VL53L0X_perform_xtalk_calibration': not in f
             -ormal parameter list
   55                  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
   56                  uint16_t sum_ranging = 0;
   57                  uint16_t sum_spads = 0;
   58                  FixPoint1616_t sum_signalRate = 0;
   59                  FixPoint1616_t total_count = 0;
   60                  uint8_t xtalk_meas = 0;
   61                  VL53L0X_RangingMeasurementData_t RangingMeasurementData;
   62                  FixPoint1616_t xTalkStoredMeanSignalRate;
   63                  FixPoint1616_t xTalkStoredMeanRange;
   64                  FixPoint1616_t xTalkStoredMeanRtnSpads;
   65                  uint32_t signalXTalkTotalPerSpad;
   66                  uint32_t xTalkStoredMeanRtnSpadsAsInt;
   67                  uint32_t xTalkCalDistanceAsInt;
   68                  FixPoint1616_t XTalkCompensationRateMegaCps;
   69          
   70                  if (XTalkCalDistance <= 0)
   71                          Status = VL53L0X_ERROR_INVALID_PARAMS;
   72          
   73                  /* Disable the XTalk compensation */
   74                  if (Status == VL53L0X_ERROR_NONE)
   75                          Status = VL53L0X_SetXTalkCompensationEnable(Dev, 0);
   76          
   77                  /* Disable the RIT */
   78                  if (Status == VL53L0X_ERROR_NONE) {
   79                          Status = VL53L0X_SetLimitCheckEnable(Dev,
   80                                          VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);
   81                  }
   82          
   83                  /* Perform 50 measurements and compute the averages */
   84                  if (Status == VL53L0X_ERROR_NONE) {
   85                          sum_ranging = 0;
   86                          sum_spads = 0;
   87                          sum_signalRate = 0;
   88                          total_count = 0;
   89                          for (xtalk_meas = 0; xtalk_meas < 50; xtalk_meas++) {
   90                                  Status = VL53L0X_PerformSingleRangingMeasurement(Dev,
   91                                          &RangingMeasurementData);
   92          
   93                                  if (Status != VL53L0X_ERROR_NONE)
   94                                          break;
   95          
   96                                  /* The range is valid when RangeStatus = 0 */
   97                                  if (RangingMeasurementData.RangeStatus == 0) {
   98                                          sum_ranging = sum_ranging +
   99                                                  RangingMeasurementData.RangeMilliMeter;
  100                                          sum_signalRate = sum_signalRate +
  101                                          RangingMeasurementData.SignalRateRtnMegaCps;
  102                                          sum_spads = sum_spads +
  103                                          RangingMeasurementData.EffectiveSpadRtnCount
  104                                                  / 256;
  105                                          total_count = total_count + 1;
  106                                  }
  107                          }
  108          
  109                          /* no valid values found */
  110                          if (total_count == 0)
C251 COMPILER V5.60.0,  vl53l0x_api_calibration                                            13/04/24  20:07:04  PAGE 3   

  111                                  Status = VL53L0X_ERROR_RANGE_ERROR;
  112          
  113                  }
  114          
  115          
  116                  if (Status == VL53L0X_ERROR_NONE) {
  117                          /* FixPoint1616_t / uint16_t = FixPoint1616_t */
  118                          xTalkStoredMeanSignalRate = sum_signalRate / total_count;
  119                          xTalkStoredMeanRange = (FixPoint1616_t)((uint32_t)(
  120                                  sum_ranging << 16) / total_count);
  121                          xTalkStoredMeanRtnSpads = (FixPoint1616_t)((uint32_t)(
  122                                  sum_spads << 16) / total_count);
  123          
  124                          /* Round Mean Spads to Whole Number.
  125                           * Typically the calculated mean SPAD count is a whole number
  126                           * or very close to a whole
  127                           * number, therefore any truncation will not result in a
  128                           * significant loss in accuracy.
  129                           * Also, for a grey target at a typical distance of around
  130                           * 400mm, around 220 SPADs will
  131                           * be enabled, therefore, any truncation will result in a loss
  132                           * of accuracy of less than
  133                           * 0.5%.
  134                           */
  135                          xTalkStoredMeanRtnSpadsAsInt = (xTalkStoredMeanRtnSpads +
  136                                  0x8000) >> 16;
  137          
  138                          /* Round Cal Distance to Whole Number.
  139                           * Note that the cal distance is in mm, therefore no resolution
  140                           * is lost.*/
  141                           xTalkCalDistanceAsInt = (XTalkCalDistance + 0x8000) >> 16;
  142          
  143                          if (xTalkStoredMeanRtnSpadsAsInt == 0 ||
  144                             xTalkCalDistanceAsInt == 0 ||
  145                             xTalkStoredMeanRange >= XTalkCalDistance) {
  146                                  XTalkCompensationRateMegaCps = 0;
  147                          } else {
  148                                  /* Round Cal Distance to Whole Number.
  149                                     Note that the cal distance is in mm, therefore no
  150                                     resolution is lost.*/
  151                                  xTalkCalDistanceAsInt = (XTalkCalDistance +
  152                                          0x8000) >> 16;
  153          
  154                                  /* Apply division by mean spad count early in the
  155                                   * calculation to keep the numbers small.
  156                                   * This ensures we can maintain a 32bit calculation.
  157                                   * Fixed1616 / int := Fixed1616 */
  158                                  signalXTalkTotalPerSpad = (xTalkStoredMeanSignalRate) /
  159                                          xTalkStoredMeanRtnSpadsAsInt;
  160          
  161                                  /* Complete the calculation for total Signal XTalk per
  162                                   * SPAD
  163                                   * Fixed1616 * (Fixed1616 - Fixed1616/int) :=
  164                                   * (2^16 * Fixed1616)
  165                                   */
  166                                  signalXTalkTotalPerSpad *= ((1 << 16) -
  167                                          (xTalkStoredMeanRange / xTalkCalDistanceAsInt));
  168          
  169                                  /* Round from 2^16 * Fixed1616, to Fixed1616. */
  170                                  XTalkCompensationRateMegaCps = (signalXTalkTotalPerSpad
  171                                          + 0x8000) >> 16;
  172                          }
  173          
  174                          *pXTalkCompensationRateMegaCps = XTalkCompensationRateMegaCps;
*** ERROR C142 IN LINE 174 OF ..\VL53L0X\core\src\vl53l0x_api_calibration.c: illegal initialization
*** ERROR C67 IN LINE 174 OF ..\VL53L0X\core\src\vl53l0x_api_calibration.c: 'XTalkCompensationRateMegaCps': undefined id
C251 COMPILER V5.60.0,  vl53l0x_api_calibration                                            13/04/24  20:07:04  PAGE 4   

             -entifier
  175          
  176                          /* Enable the XTalk compensation */
  177                          if (Status == VL53L0X_ERROR_NONE)
*** ERROR C25 IN LINE 177 OF ..\VL53L0X\core\src\vl53l0x_api_calibration.c: syntax error near 'if'
*** ERROR C25 IN LINE 177 OF ..\VL53L0X\core\src\vl53l0x_api_calibration.c: syntax error near '=='
*** ERROR C25 IN LINE 177 OF ..\VL53L0X\core\src\vl53l0x_api_calibration.c: syntax error near ')'
  178                                  Status = VL53L0X_SetXTalkCompensationEnable(Dev, 1);
*** ERROR C67 IN LINE 178 OF ..\VL53L0X\core\src\vl53l0x_api_calibration.c: 'Dev': undefined identifier
*** WARNING C140 IN LINE 178 OF ..\VL53L0X\core\src\vl53l0x_api_calibration.c: 'VL53L0X_SetXTalkCompensationEnable' unde
             -fined; assuming 'extern int VL53L0X_SetXTalkCompensationEnable()'
*** ERROR C143 IN LINE 178 OF ..\VL53L0X\core\src\vl53l0x_api_calibration.c: 'scalar': initializer is not a constant
  179          
  180                          /* Enable the XTalk compensation */
  181                          if (Status == VL53L0X_ERROR_NONE)
*** ERROR C25 IN LINE 181 OF ..\VL53L0X\core\src\vl53l0x_api_calibration.c: syntax error near 'if'
*** ERROR C25 IN LINE 181 OF ..\VL53L0X\core\src\vl53l0x_api_calibration.c: syntax error near '=='
*** ERROR C25 IN LINE 181 OF ..\VL53L0X\core\src\vl53l0x_api_calibration.c: syntax error near ')'
  182                                  Status = VL53L0X_SetXTalkCompensationRateMegaCps(Dev,
*** ERROR C67 IN LINE 182 OF ..\VL53L0X\core\src\vl53l0x_api_calibration.c: 'Dev': undefined identifier
  183                                                  XTalkCompensationRateMegaCps);
*** ERROR C67 IN LINE 183 OF ..\VL53L0X\core\src\vl53l0x_api_calibration.c: 'XTalkCompensationRateMegaCps': undefined id
             -entifier
*** WARNING C140 IN LINE 183 OF ..\VL53L0X\core\src\vl53l0x_api_calibration.c: 'VL53L0X_SetXTalkCompensationRateMegaCps'
             - undefined; assuming 'extern int VL53L0X_SetXTalkCompensationRateMegaCps()'
*** ERROR C143 IN LINE 183 OF ..\VL53L0X\core\src\vl53l0x_api_calibration.c: 'scalar': initializer is not a constant
  184          
  185                  }
*** ERROR C25 IN LINE 185 OF ..\VL53L0X\core\src\vl53l0x_api_calibration.c: syntax error near '}'
  186          
  187                  return Status;
*** WARNING C34 IN LINE 187 OF ..\VL53L0X\core\src\vl53l0x_api_calibration.c: 'Status': missing declaration specifiers
  188          }
*** ERROR C25 IN LINE 188 OF ..\VL53L0X\core\src\vl53l0x_api_calibration.c: syntax error near '}'
  189          
  190          VL53L0X_Error VL53L0X_perform_offset_calibration(VL53L0X_DEV Dev,
*** ERROR C25 IN LINE 190 OF ..\VL53L0X\core\src\vl53l0x_api_calibration.c: syntax error near 'Dev'
*** ERROR C7 IN LINE 190 OF ..\VL53L0X\core\src\vl53l0x_api_calibration.c: compilation aborted

C251 COMPILATION COMPLETE.  4 WARNING(S),  25 ERROR(S)
