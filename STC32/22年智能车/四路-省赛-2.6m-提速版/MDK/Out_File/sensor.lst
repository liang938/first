C251 COMPILER V5.60.0,  sensor                                                             25/11/23  03:49:38  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE sensor
OBJECT MODULE PLACED IN .\Out_File\sensor.obj
COMPILER INVOKED BY: D:\keil5\keil5_MDK\keil5_MDK_32\C251\BIN\C251.EXE ..\USER\src\sensor.c XSMALL INTR2 WARNINGLEVEL(3)
                    - BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;
                    -..\USER\inc;..\USER\src) DEBUG PRINT(.\Out_File\sensor.lst) OBJECT(.\Out_File\sensor.obj) 

stmt  level    source

    1          #include "headfile.h"
    2          
    3          int ADC_MIN = 0;                                                                                        //电感采集最小值
    4          int ADC_MAX = 100;                                                                                      //电感采集最大值
    5          int READ_MAX = 100;                                                                             //电感归一化后最大值
    6          int ad[4][3];                                                                                                   //二维数组，存储四路adc连续采集三次的电感值
    7          int temp;                                                                                                                       //中值滤波临时变量
    8          int sensor[4];                                                                                          //滤波后的当前四路电感值
    9          int time_count=0;                                                                                       //时间积分变量
   10          int servos_flag=0;                                                                              //判断是否为环岛
   11          int servos_middle = 840;                                                        //舵机中间位置
   12          int leftspeed,rightspeed;                                                       //左右电机差速度
   13          int cross_num=0;                                                                                        //防止十字误判
   14          int cross_flag=0;                                                                                       //十字标志位
   15          float speed_add=0;                                                                              //直道加速
   16          float speed_err=0;                                                                              //转弯速度增益
   17          float speed_low=0;                                                                              //转弯差速程度,越小差速越大
   18          float l,lm,rm,r;                                                                                        //左、左中、右中、右四路电感
   19          float sensor_err;                                                                                       //电感偏差值
   20          float servos_err;                                                                                       //舵机偏差值
   21          extern bit Stop_flag;                                                                   //冲出赛道标志
   22          extern bit Barrier_flag;                                                        //避障标志位
   23          extern int element_num;                                                         //经过元素的数量
   24          extern float Speed;                                                                             //预设速度
   25          extern PID_InitTypeDef PID_Servos;              //舵机结构体变量
   26          
   27          void ADC_Read()                                                                                                                         //电感采集
   28          {
   29   1              int i;
   30   1              for(i=0;i<3;i++)                                                                                                                //连续采集3次
   31   1              {
   32   2                      ad[0][i] = adc_once(ADC_P00, ADC_8BIT);         //一路电感
   33   2                      ad[1][i] = adc_once(ADC_P05, ADC_8BIT);         //二路电感
   34   2                      ad[2][i] = adc_once(ADC_P06, ADC_8BIT);         //三路电感
   35   2                      ad[3][i] = adc_once(ADC_P16, ADC_8BIT);         //四路电感
   36   2              }
   37   1              for(i=0;i<4;i++)                                                                                                                //中值滤波,取连续采集三次电感值的中间值 
   38   1              {
   39   2                      if(ad[i][0]>ad[i][1])
   40   2                      {
   41   3                              temp = ad[i][0];
   42   3                              ad[i][0] = ad[i][1];
   43   3                              ad[i][1] = temp;
   44   3                      }
   45   2                      if(ad[i][1]>ad[i][2])
   46   2                      {
   47   3                              temp = ad[i][0];
   48   3                              ad[i][0] = ad[i][1];
   49   3                              ad[i][1] = temp;
   50   3                      }
   51   2                      if(ad[i][0]>ad[i][1])
   52   2                      {
   53   3                              temp = ad[i][0];
   54   3                              ad[i][0] = ad[i][1];
   55   3                              ad[i][1] = temp;
   56   3                      }
   57   2                      ad[i][1] = (ad[i][1]>ADC_MAX)?ADC_MAX:ad[i][1];                                 //对电感值进行限幅处理
C251 COMPILER V5.60.0,  sensor                                                             25/11/23  03:49:38  PAGE 2   

   58   2                      ad[i][1] = 100*(ad[i][1]-ADC_MIN)/(ADC_MAX-ADC_MIN);            //归一化,将电感值限制在0~100之间
   59   2              }
   60   1              l = ad[0][1];                                   //左电感
   61   1              lm = ad[1][1];                          //左中电感
   62   1              rm = ad[2][1];                          //右中电感
   63   1              r = ad[3][1];                                   //右电感
   64   1              if((l+lm+rm+r)<20)
   65   1                      Stop_flag=1;
   66   1              circle_judge();
   67   1      }
   68          
   69          //位置偏差计算
   70          void Pos_Deviation()    
   71          {
   72   1              if(cross_flag==1)                                                                                                       //如果判断为十字，开始时间积分，防止在经过十字时多次判断为十字
   73   1              {                                                                       
   74   2                      cross_num+=1;                                                                                                           //开始十字时间积分
   75   2                      if(cross_num==20)                                                                                               //如果十字时间积分等于100ms
   76   2                      {
   77   3                              cross_flag=0;                                                                                                   //十字标志清零
   78   3                              cross_num=0;                                                                                                    //十字时间积分清零
   79   3                      }
   80   2              }
   81   1              else    
   82   1              {
   83   2                      if(servos_flag==0&&lm>50&&rm>50)                                                                                                                        //如果是十字
   84   2                      {
   85   3                              cross_flag=1;                                                                                                                                                                                           //十字标志开启
   86   3                              element_num+=1;                                                                                                                                                                                 //元素数量加一
   87   3                      }
   88   2              }
   89   1              if(servos_flag!=0)                                                                                                                                                                                      //如果是环岛
   90   1                      circle_move();                                                                                                                                                                                          //环岛寻迹
   91   1              else                                                                                                                                                                                                                                            //如果是正常路段
   92   1                      sensor_err = 100*(1.7*(l-r)+1.7*(lm-rm))/((l+r)+0.5*(lm+rm));   //差比和算法,偏差值小于零向右转，大于零向
             -左转 
   93   1              if(-60<sensor_err&&sensor_err<60)
   94   1              {
   95   2                      speed_add = 50;                                         //直道加速
   96   2                      speed_err       =       400;                                    //直道转弯速度增益
   97   2                      speed_low = 300;                                        //转弯差速程度,越小差速越大
   98   2                      PID_Servos.KP = 0.4;
   99   2                      PID_Servos.KI = 0;
  100   2                      PID_Servos.KD = 4.5;
  101   2              }
  102   1              else
  103   1              {
  104   2                      speed_add = (servos_flag==0)?-20:0;                                             //直道加速
  105   2                      speed_err       =       600;                                                                                                                    //弯道转弯速度增益      
  106   2                      speed_low = -530;                                                                                                                       //转弯差速程度,越小差速越大
  107   2                      PID_Servos.KP = 1;
  108   2                      PID_Servos.KI = 0;
  109   2                      PID_Servos.KD = 35;
  110   2              }
  111   1      }
  112          
  113          void Servos_Control()                                                                                                                                                                                           //车身姿态调整
  114          {
  115   1      
  116   1              if(servos_flag!=0)                                                              //如果在环岛中
  117   1                      time_count+=1;                                                                  //开始时间积分
  118   1      
  119   1              printf("%.0f,%.0f,%.0f,%.0f,%.0f,%d\n",l,lm,rm,r,sensor_err,servos_flag);
  120   1      //舵机控制
  121   1              PID_Calc_Positional(&PID_Servos, 0, sensor_err);                                                                        //舵机输出值计算
  122   1              pwm_duty(PWMB_CH1_P74,servos_middle-(int)PID_Servos.Total_Out);         //舵机控制  
C251 COMPILER V5.60.0,  sensor                                                             25/11/23  03:49:38  PAGE 3   

  123   1      
  124   1      //电机差速
  125   1              if(sensor_err<0)
  126   1              {
  127   2                      leftspeed = (int)((Speed+speed_add)*(1-PID_Servos.Total_Out/speed_err));
  128   2                      rightspeed = (int)((Speed+speed_add)*(1-PID_Servos.Total_Out/(speed_err+speed_low)));
  129   2                      //rightspeed = (int)(Speed+speed_add);
  130   2              }
  131   1              else
  132   1              {
  133   2                      rightspeed = (int)((Speed+speed_add)*(1+PID_Servos.Total_Out/speed_err));
  134   2                      leftspeed = (int)((Speed+speed_add)*(1+PID_Servos.Total_Out/(speed_err+speed_low)));
  135   2                      //leftspeed = (int)(Speed+speed_add);
  136   2              }
  137   1              Speedcontrol(leftspeed, rightspeed);                                                                                                                    //调整当前速度
  138   1      }
  139          
  140          
  141          
  142          
  143          
  144          
  145          
  146          
  147          
  148          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1057     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        90     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       101     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
